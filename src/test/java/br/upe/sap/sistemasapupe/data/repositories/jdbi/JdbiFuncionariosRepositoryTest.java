package br.upe.sap.sistemasapupe.data.repositories.jdbi;

import br.upe.sap.sistemasapupe.configuration.EmbeddedDatabaseConfiguration;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Estagiario;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Funcionario;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Tecnico;
import org.jdbi.v3.core.Jdbi;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
import org.springframework.test.context.ContextConfiguration;

import java.util.List;
import java.util.stream.Stream;

@JdbcTest
@ContextConfiguration(classes = {EmbeddedDatabaseConfiguration.class})
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@EntityScan(basePackages = {"br.upe.sap.sistemasapupe.data"})
public class JdbiFuncionariosRepositoryTest {

    @Autowired
    Jdbi jdbi;

    @Autowired
    JdbiFuncionariosRepository repository;

    @AfterEach
    public void truncateTables() {
        jdbi.withHandle(handle -> handle.execute("TRUNCATE TABLE funcionarios, supervisoes CASCADE"));
    }

    private List<Tecnico> getTecnicos() {
        Tecnico tecnico1 = Tecnico.tecnicoBuilder()
                .nome("Carlinhos").sobrenome("Carlos")
                .email("carlos@gmail.com").senha("123456")
                .isAtivo(true).urlImagem("www.com").build();
        Tecnico tecnico2 = Tecnico.tecnicoBuilder()
                .nome("Jiró").sobrenome("Brabo")
                .email("Jaca@gmail.com").senha("1210")
                .isAtivo(true).urlImagem("www.com").build();

        return List.of(tecnico1, tecnico2);
    }

    private List<Estagiario> getEstagiarios() {
        Estagiario estagiario1 = Estagiario.estagiarioBuilder()
                .nome("Luan").sobrenome("Vilaça")
                .email("luan@gmail.com").senha("1234")
                .isAtivo(true).urlImagem("www.com").build();
        Estagiario estagiario2 = Estagiario.estagiarioBuilder()
                .nome("Maria").sobrenome("Joaquina")
                .email("maria@gmail.com").senha("1234")
                .isAtivo(true).urlImagem("www.com").build();

        return List.of(estagiario1, estagiario2);
    }


    // CREATE
    @Test()
    @DisplayName("Dado um técnico, quando criado, retornar técnico com as chaves auto-geradas retornadas")
    public void givenTecnico_whenCreate_thenReturnTecnicoWithAutoGeneratedKeys() {
        Tecnico tecnico = getTecnicos().get(0);

        Tecnico result = (Tecnico) repository.create(tecnico);

        Assertions.assertNotNull(result, "Retorno nulo");
        assertIdsAreNotNull(result);
        assertEqualsWithoutIds(result, tecnico);
    }

    private static void assertEqualsWithoutIds(Funcionario f1, Funcionario f2) {
        if (f1 == f2) return;

        boolean comparison = f1.getCargo().equals(f2.getCargo()) &&
                             f1.getNome().equals(f2.getNome()) &&
                             f1.getEmail().equals(f2.getEmail()) &&
                             f1.getSenha().trim().equals(f2.getSenha().trim()) &&
                             f1.getUrlImagem().equals(f2.getUrlImagem()) &&
                             f1.isAtivo() == f2.isAtivo();

        Assertions.assertTrue(comparison, "O funcionário retornado tem atributos diferentes");
    }

    private static void assertIdsAreNotNull(Funcionario funcionario) {
        Assertions.assertNotNull(funcionario.getId(), "ID nulo");
        Assertions.assertNotNull(funcionario.getId(), "UID nulo");
    }

    @Test
    @DisplayName("Dado um estagiário, quando criado, retornar funcionário com as chaves auto-geradas retornadas")
    public void givenEstagiario_whenCreate_thenReturnEstagiarioWithAutoGeneratedKeysAndSupervisor() {
        Estagiario estagiario = getEstagiarios().get(0);
        Tecnico supervisor = (Tecnico) repository.create(getTecnicos().get(0));
        estagiario.setSupervisor(supervisor);

        Estagiario result = (Estagiario) repository.create(estagiario);

        var mappings = jdbi.withHandle(handle -> handle
                .createQuery("SELECT * FROM supervisoes")
                .mapToMap()
                .collectIntoList());
        System.out.println(mappings);

        Assertions.assertNotNull(result, "Retorno nulo");
        Assertions.assertNotNull(result.getSupervisor(), "Supervisor nulo");
        assertIdsAreNotNull(result.getSupervisor());
        assertEqualsWithoutIds(result.getSupervisor(), estagiario.getSupervisor());
        assertIdsAreNotNull(result);
        assertEqualsWithoutIds(estagiario, result);
    }

    @Test
    @DisplayName("Dado um estagiário com um supervisor que ainda não foi salvo no banco, quando criar, " +
                 "persistir o supervisor e então retornar o estagiário com os dados corretos")
    public void givenEstagiarioWithUnpersistedSupervisor_whenCreate_ThenCreateSupervisorAndReturnEstagiario() {
        Estagiario estagiario = getEstagiarios().get(0);
        estagiario.setSupervisor(getTecnicos().get(0));

        Estagiario result = (Estagiario) repository.create(estagiario);

        Assertions.assertNotNull(result, "Retorno nulo");
        Assertions.assertNotNull(result.getSupervisor(), "Supervisor nulo");
        assertIdsAreNotNull(result.getSupervisor());
        assertEqualsWithoutIds(result.getSupervisor(), estagiario.getSupervisor());
        assertIdsAreNotNull(result);
        assertEqualsWithoutIds(estagiario, result);
    }

    @Test
    @DisplayName("Dados vários estagiários, quando criados, retornar funcionários com as chaves auto-geradas" +
                 "retornadas")
    public void givenEstagiarios_whenCreate_thenReturnEstagiariosWithAutoGeneratedKeys() {
        List<Estagiario> estagiarios = getEstagiarios();
        List<Tecnico> tecnicos = getTecnicos();

        List<Funcionario> funcionarios = Stream.concat(estagiarios.stream(), tecnicos.stream()).toList();

        List<Funcionario> results = repository.create(funcionarios);

        Assertions.assertFalse(results.isEmpty(), "Nenhum retorno");
        Assertions.assertEquals(results.size(), funcionarios.size(), "Resultado de tamanho diferente" +
                                                                     "dos registros criados");
        for (int i = 0; i < results.size(); i++) {
            assertIdsAreNotNull(results.get(i));
            assertEqualsWithoutIds(results.get(i), funcionarios.get(i));
        }
    }


    // UPDATE
    @Test
    @DisplayName("Dado um id de estagiário e técnico, quando atualizar supervisor, retornar estagiário com" +
                 "nome supervisor")
    public void givenIdEstagiarioAndIdTecnico_whenUpdateSupervisao_thenReturnEstagiarioWithNewTecnico() {
        Estagiario estagiario = getEstagiarios().get(0);
        Tecnico supervisor = (Tecnico) repository.create(getTecnicos().get(0));
        Tecnico supervisor2 = (Tecnico) repository.create(getTecnicos().get(1));

        estagiario.setSupervisor(supervisor);
        repository.create(estagiario);

        Assertions.assertEquals(estagiario.getSupervisor().getId(), supervisor.getId());

        Estagiario result = repository.updateSupervisao(estagiario.getUid(), supervisor2.getUid());

        Assertions.assertEquals(supervisor2.getUid(), result.getSupervisor().getUid(),
                "UID do novo supervisor diferente do esperado");
        Assertions.assertEquals(supervisor2.getId(), result.getSupervisor().getId(),
                "Id do novo supervisor diferente do esperado");
    }

    // READ
    @Test
    @DisplayName("Dado um uid, quando procurar por uid, retornar um funcionário com os dados e cargo corretos")
    public void givenUid_whenFinById_thenReturnFuncionarioWithRightDataAndRole() {
        Estagiario estagiario = getEstagiarios().get(0);
        Tecnico tecnico = getTecnicos().get(0);
        estagiario.setSupervisor(tecnico);

        estagiario = (Estagiario) repository.create(estagiario);
        tecnico = estagiario.getSupervisor();

        Estagiario estagiario2 = (Estagiario) repository.findById(estagiario.getUid());
        Tecnico tecnico2 = (Tecnico) repository.findById(tecnico.getUid());

        Assertions.assertNotNull(estagiario2, "Retorno nulo para estagiário");
        Assertions.assertNotNull(tecnico2, "Retorno nulo para técnico");
        assertEqualsWithoutIds(estagiario, estagiario2);
        assertEqualsWithoutIds(tecnico, tecnico2);
    }

    @Test
    @DisplayName("Dado uids, quando procurar por todos, retornar todos os funcionários com os dados " +
                 "e cargos corretos")
    public void givenUids_whenFindAll_thenReturnFuncionariosWithRightDataAndRole() {
        List<Estagiario> estagiarios = getEstagiarios();
        List<Tecnico> tecnicos = getTecnicos();

        List<Funcionario> funcionarios = Stream.concat(estagiarios.stream(), tecnicos.stream()).toList();

        repository.create(funcionarios);

        List<Funcionario> results = repository.findAll();

        Assertions.assertFalse(results.isEmpty(), "Nenhum retorno");
        Assertions.assertEquals(results.size(), funcionarios.size(), "Resultado de tamanho diferente" +
                                                                     "dos registros criados");
        for (int i = 0; i < results.size(); i++) {
            System.out.println(results.get(i));
            assertIdsAreNotNull(results.get(i));
            assertEqualsWithoutIds(results.get(i), funcionarios.get(i));
        }
    }

    @Test
    @DisplayName("Dado um uid de técnico, quando procurar por supervisionados, retorna supervisionados")
    public void givenUidTecnico_whenFindSupervisionados_thenReturnSupervisionados() {
        Tecnico tecnico = getTecnicos().get(0);
        List<Estagiario> supervisionados = getEstagiarios();

        Tecnico createdTecnico = (Tecnico) repository.create(tecnico);

        supervisionados.forEach(x -> x.setSupervisor(createdTecnico));

        List<Estagiario> createdSupervisionados = supervisionados.stream()
            .map(repository::create)
            .map(x -> (Estagiario) x)
            .toList();

        List<Estagiario> results = repository.findSupervisionados(createdTecnico.getUid());

        Assertions.assertFalse(results.isEmpty(), "Nenhum retorno");
        Assertions.assertEquals(results.size(), createdSupervisionados.size(), "Resultado de tamanho diferente" +
                                                                     "dos registros criados");
        for (int i = 0; i < results.size(); i++) {
            System.out.println(results.get(i));
            assertIdsAreNotNull(results.get(i));
            assertEqualsWithoutIds(results.get(i), createdSupervisionados.get(i));
        }
    }

    @Test
    @DisplayName("Dado uid do estagiário, quando procurar por supervisor, retornar supervisor")
    public void givenUidEstagiario_whenFindSupervisor_thenReturnSupervisor() {
        Tecnico supervisor = (Tecnico) repository.create(getTecnicos().get(0));
        Estagiario estagiario = getEstagiarios().get(0);
        estagiario.setSupervisor(supervisor);
        estagiario = (Estagiario) repository.create(estagiario);

        Tecnico result = repository.findSupervisor(estagiario.getUid());

        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getId(), supervisor.getId(), "Ids não iguais");
        Assertions.assertEquals(result.getUid(), supervisor.getUid(), "Uids não iguais");
        assertEqualsWithoutIds(result, supervisor);
    }


    // DELETE
    @Test
    @DisplayName("Dado o uid de um funcionário, ao deletar, retornar 1")
    public void givenUidFuncionario_whenDelete_thenReturn1() {
        Funcionario funcionario = repository.create(getTecnicos().get(0));

        Integer deleted = repository.delete(funcionario.getUid());
        Funcionario findResult = repository.findById(funcionario.getUid());

        Assertions.assertEquals(deleted, 1, "Nenhum registro foi afetado");
        Assertions.assertNull(findResult, "A busca retornou o suposto funcionário deletado");
    }

}
