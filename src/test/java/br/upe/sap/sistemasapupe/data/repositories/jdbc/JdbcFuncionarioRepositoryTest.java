package br.upe.sap.sistemasapupe.data.repositories.jdbc;
import br.upe.sap.sistemasapupe.configuration.EmbeddedDatabaseConfiguration;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Estagiario;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Funcionario;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Tecnico;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;

import java.util.List;

@JdbcTest
@ContextConfiguration(classes = {EmbeddedDatabaseConfiguration.class})
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@EntityScan(basePackages = {"br.upe.sap.sistemasapupe.data"})
public class JdbcFuncionarioRepositoryTest {

    @Autowired
    private JdbcFuncionarioRepository repository;

    @Autowired
    private JdbcTemplate jdbc;

    @AfterEach
    public void truncateTables() {
        jdbc.execute("TRUNCATE TABLE funcionarios, supervisoes CASCADE");
    }

    @Test()
    @DisplayName("Given funcionarios, when created, " +
                "then return funcionarios with auto generated keys returned")
    public void givenFuncionario_whenCreate_thenReturnFuncionarioWithAutoGeneratedKeys() {
        Funcionario funcionario = Tecnico.tecnicoBuilder()
                .nome("Luan").sobrenome("Vilaça")
                .email("luan@gmail.com").senha("1234")
                .urlImagem("www.com").build();

        Funcionario registeredFuncionario = repository.create(funcionario);

        Assertions.assertNotNull(registeredFuncionario.getId(), "Null id");
        Assertions.assertNotNull(registeredFuncionario.getUid(), "Null uid");
    }

    @Test()
    @DisplayName("When find all funcionarios, then return List of funcionarios")
    public void whenFindAll_thenReturnFuncionarioList() {
        Funcionario funcionario = Tecnico.tecnicoBuilder()
                .nome("Luan").sobrenome("Vilaça")
                .email("luan@gmail.com").senha("1234")
                .urlImagem("www.com").build();

        repository.create(funcionario);
        List<Funcionario> funcionarios = repository.findAll();

        funcionarios.forEach(System.out::println);
    }

    @Test
    @DisplayName("When find by id, then return funcionario")
    public void whenFindById_thenReturnFuncionario() {
        Funcionario funcionario = Tecnico.tecnicoBuilder()
                .nome("Luan").sobrenome("Vilaça")
                .email("luan@gmail.com").senha("1234")
                .urlImagem("www.com").build();

        repository.create(funcionario);

        Funcionario result = repository.findById(funcionario.getUid());

        System.out.println(result);
    }

    @Test
    @DisplayName("Given estagiario and supervisor, when updating supervisionado, then return supervisor")
    public void givenEstagiarioAndSupervisor_whenUpdateSupervisionado_ThenReturnSupervisor() {
        Funcionario supervisor = Tecnico.tecnicoBuilder()
                .nome("Luan").sobrenome("Vilaça")
                .email("luan@gmail.com").senha("1234")
                .urlImagem("www.com").build();
        Funcionario estagiario = Estagiario.estagiarioBuilder()
                .nome("Pedrin").sobrenome("Doido")
                .email("frifa@gmail.com").senha("1234")
                .urlImagem("www.com.br").build();
    }

}
