package br.upe.sap.sistemasapupe.data.repositories.jdbi;

import br.upe.sap.sistemasapupe.configuration.EmbeddedDatabaseConfiguration;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Estagiario;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Funcionario;
import br.upe.sap.sistemasapupe.data.model.funcionarios.Tecnico;
import br.upe.sap.sistemasapupe.data.model.posts.Post;
import org.jdbi.v3.core.Jdbi;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
import org.springframework.test.context.ContextConfiguration;

import java.time.LocalDateTime;
import java.util.List;

@JdbcTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@ContextConfiguration(classes = {EmbeddedDatabaseConfiguration.class})
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@EntityScan(basePackages = {"br.upe.sap.sistemasapupe.data"})
public class JdbiPostsRepositoryTest {
    @Autowired
    Jdbi jdbi;

    @Autowired
    JdbiPostsRepository repository;

    List<Funcionario> funcionarios = List.of();

    @Autowired
    JdbiFuncionariosRepository funcionariosRepository;

    @BeforeAll
    public void addFuncionario(){
        Tecnico tecnico = Tecnico.tecnicoBuilder()
                .nome("Carlinhos").sobrenome("Carlos")
                .email("carlos@gmail.com").senha("123456")
                .urlImagem("www.com").build();

        Funcionario funcionario1 = funcionariosRepository.create(tecnico);

        Estagiario estagiario = Estagiario.estagiarioBuilder()
                .nome("Luan").sobrenome("Vilaça")
                .email("luan@gmail.com").senha("1234")
                .urlImagem("www.com").build();

        Funcionario funcionario2 = funcionariosRepository.create(estagiario);

        funcionariosRepository.create(estagiario);

        this.funcionarios.add(funcionario1);
        this.funcionarios.add(funcionario2);
    }

    @AfterEach
    public void truncateTables() {
        jdbi.withHandle(handle -> handle.execute("TRUNCATE TABLE posts, comentarios CASCADE"));
    }

    @Test
    @DisplayName("Dado um post, quando criar, então retorne post com as chaves auto-geradas")
    public void givenPost_whenCreate_thenReturnPostWithAutoGeneratedKeys() {
        Funcionario funcionario = funcionarios.get(0);

        Post post = Post.postBuilder()
                .autor(funcionario)
                .comentarios(null)
                .dataPublicacao(LocalDateTime.now())
                .imagem("url")
                .titulo("titulo")
                .conteudo("conteudo")
                .build();

        repository.create(post);
    }

}
